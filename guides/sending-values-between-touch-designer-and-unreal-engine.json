{
    "slug": "sending-values-between-touch-designer-and-unreal-engine",
    "title": "Sending values between Touch Designer and Unreal Engine in real-time",
    "description": "Learn how to setup the two programs in a way where you can send as many numeric values between them as you like.",
    "steps": [
        {
            "title": "Installing the TouchDesigner plugin",
            "description": "Move or extract the downloaded plugin file to the TouchDesigner plugins directory.\nThe default paths for macOS and Windows are currently the following (you may need to create the `Plugins` folder yourself):\n- **Windows**: `C:\\Users\\<your username>\\Documents\\Derivative\\Plugins\\`\n- **macOS**: `/Users/<your username>/Library/Application Support/Derivative/TouchDesigner099/Plugins`\n\nOn Windows, you'll also need to right-click on the downloaded file, go to `Properties` and enable the `Unblock` checkbox at the bottom of the window, then hit `Apply`.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/28cb6d81-f40e-4f9e-9755-b9e7e568a7cd?autoplay=true",
            "buttons": [
                {
                    "title": "Download the plugin file",
                    "href": "https://github.com/thatmarcel/touchdesigner-plugins/releases/tag/unreal-engine-connection-build-1"
                }
            ],
            "troubleshootingSections": []
        },
        {
            "title": "Preparing the TouchDesigner project",
            "description": "Open or create a TouchDesigner project and place an `Unreal Engine Connection` CHOP from the `Custom` tab in the **OP Create Dialog**.\n\nIn the parameters for the CHOP, click `Add` next to `Callback DAT` (you don't need to do anything with that DAT but it's needed by the plugin as a workaround for reading the input channel names).",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/7bf3e915-c999-4eac-8c6f-0a71abe300c5",
            "buttons": [],
            "troubleshootingSections": []
        },
        {
            "title": "Installing VS Build Tools",
            "description": "If you're on Windows, you'll need to install Visual Studio Build Tools to build or run your Unreal Engine project. You'll need these even if you don't plan on using Visual Studio as your code editor (in this guide, we'll use Rider).\n\nAfter starting the Setup, select and install \"Desktop development with C++\".\n\nIf you already have Visual Studio installed, these tools might be installed already.",
            "coverImageUrl": null,
            "coverVideoUrl": null,
            "buttons": [],
            "troubleshootingSections": []
        },
        {
            "title": "Creating an Unreal Engine C++ project",
            "description": "Open or create a project in Unreal Engine (tested with UE 5.4.1 but other versions may work as well).\n\nThen, create a new C++ class via the `Tools` menu to create a C++ project if you don't have one already.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/80d54524-4562-4fb7-8e5e-4b027bd9b862",
            "buttons": [],
            "troubleshootingSections": []
        },
        {
            "title": "Installing Rider (recommended)",
            "description": "This tutorial uses Jetbrains Rider as the code editor so if you want to follow along exactly, install Rider. If you know what you're doing and want to use Visual Studio, you can skip this step.\n\nAfter installing Rider, go to `Edit` > `Editor Preferences` in Unreal Engine, search for `code editor` and set `Rider Uproject` as the default.\n\nAfter restarting Unreal Engine, you can now open the project in Rider via the `Tools` menu.\n\nAfter processing the project files, Rider should ask you whether you want to install the `UnrealLink` or `RiderLink` plugin (if not, check the notifications tab on the right). Select the option to install it in the engine. After that's done, restart both programs.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/07405ff1-47a9-4046-94ae-d111f2ed77c4",
            "buttons": [
                {
                    "title": "Download Rider",
                    "href": "https://www.jetbrains.com/rider/"
                }
            ],
            "troubleshootingSections": []
        },
        {
            "title": "Getting the Unreal Engine code files and compiling the C++ project",
            "description": "Move the `TouchDesignerConnection` folder from the downloaded archive into the `<UE project location>/Source/<UE project name>` folder (there should also be the files `<UE project name>.cpp` and `<UE project name>.Build.cs` in there).\n\nYou also need to add `\"Networking\"` and `\"Sockets\"` to the list of `PublicDependencyModuleNames` in the `<UE project name>.Build.cs` file.\n\nNext, open `<UE project name>/Source/<UE project name>/Public/<the class you created earlier>.h`. Copy `<whatever>_API` after the `class` keyword (probably in line 10).\n\nOpen `<UE project name>/Source/<UE project name>/TouchDesignerConnection/TouchDesignerConnectionActor.h` and replace `BLANKTEST1_API` with what you copied.\n\nTo compile the project, hit the button with a hammer and a leaf in the top bar in Rider.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/46cda3c9-d4c7-4496-aefb-2ec6015b598a",
            "buttons": [
                {
                    "title": "Download the code files archive",
                    "href": "https://github.com/thatmarcel/unreal-engine-touch-designer-connection/archive/refs/heads/main.zip"
                }
            ],
            "troubleshootingSections": []
        },
        {
            "title": "Placing the actor in the Unreal Engine level",
            "description": "Find the `TouchDesignerConnectionActor` in the `C++ Classes/<UE project name>/TouchDesignerConnection` folder inside the Unreal Engine **Content Browser** and drag it into the level view to place it in the world.\n\nThen, run the Unreal Engine project.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/29e71a43-5e6b-4bf0-aa65-4eefee9533d1",
            "buttons": [],
            "troubleshootingSections": []
        },
        {
            "title": "Sending values from Unreal Engine to Touch Designer",
            "description": "Add entries to the `Sent Values` on the `TouchDesignerConnectionActor` manually or e.g. via a blueprint.\n\nThe output of the `Unreal Engine Connection` CHOP will then contain these values.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/ba083d96-dabf-4cd7-b38e-3688de172a87",
            "buttons": [],
            "troubleshootingSections": []
        },
        {
            "title": "Sending values from Touch Designer to Unreal Engine",
            "description": "Attach a CHOP with one or more channels to the input of the `Unreal Engine Connection` CHOP.\n\nThe values from that CHOP will now appear under `Received Values` on the `TouchDesignerConnectionActor` instance. You can e.g. access these values via blueprints.",
            "coverImageUrl": null,
            "coverVideoUrl": "https://iframe.mediadelivery.net/embed/248890/84fd3b63-733a-4d93-bad9-0602ba4ead9d",
            "buttons": [],
            "troubleshootingSections": []
        }
    ]
}